import numpy as np
import matplotlib.pyplot as plt
import emcee
import corner


# Define the exponential decay function
def exponential_model(parameters, x_values):
    total_decays, half_life, background = parameters
    return (total_decays * 0.693147) / (half_life * 0.693147) * np.exp(x_values / (-half_life / 0.693147)) + background

# Define the log-likelihood function
def log_likelihood(parameters, x_values, y_values, x_errors, y_errors):
    total_decays, half_life, background = parameters
    model_values = exponential_model(parameters, x_values)
    total_error = np.sqrt(y_errors**2 + (x_errors)**2)
    sigma_squared = total_error**2
    return -0.5 * np.sum((y_values - model_values)**2 / sigma_squared + np.log(sigma_squared))


# Define the log-prior function
def log_prior(parameters):
    total_decays, half_life, background = parameters
    if 100000 < total_decays < 3000000 and 60.0 < half_life < 80.0 and 0.0 < background < 10.0:
        return 0.0
    return -np.inf


# Define the log-posterior function
def log_posterior(parameters, x_values, y_values, x_errors, y_errors):
    log_prior_val = log_prior(parameters)
    if not np.isfinite(log_prior_val):
        return -np.inf
    return log_prior_val + log_likelihood(parameters, x_values, y_values, x_errors, y_errors)

# Input Data
# x_values = np.array([1858.5, 3254.19, 240.56, 389.563, 509.978, 1034.54, 1258.27, 1795.13, 519.299, 829.71, 1446.98, 2225.88, 2758.24, 3052.86])
# x_errors = np.array([1.1018, 0.4202, 0.1258, 0.0161, 0.0178, 0.2888, 0.3806, 0.6457, 0.0773, 0.1399, 0.5624, 11.8172, 1.4090, 1.9001]) * 1
# y_values = np.array([1460.820, 2614.511, 121.7817, 244.6974, 344.2785, 778.9045, 964.057, 1408.013, 351.9320, 609.321, 1120.294, 1764.491, 2204.10, 2447.69])
# y_errors = np.array([0.005, 0.010, 0.003, 0.008, 0.012, 0.024, 0.05, 0.03, 0.0021, 0.007, 0.006, 0.014, 0.04, 0.03]) * 1
x_values = np.array([160.5, 161.5, 162.5, 163.5, 164.5, 165.5, 166.5, 167.5, 168.5, 169.5, 170.5, 171.5, 172.5, 173.5, 174.5, 175.5, 176.5, 177.5, 178.5, 179.5, 180.5, 181.5, 182.5, 183.5, 184.5, 185.5, 186.5, 187.5, 188.5, 189.5, 190.5, 191.5, 192.5, 193.5, 194.5, 195.5, 196.5, 197.5, 198.5, 199.5, 200.5, 201.5, 202.5, 203.5, 204.5, 205.5, 206.5, 207.5, 208.5, 209.5, 210.5, 211.5, 212.5, 213.5, 214.5, 215.5, 216.5, 217.5, 218.5, 219.5, 220.5, 221.5, 222.5, 223.5, 224.5, 225.5, 226.5, 227.5, 228.5, 229.5, 230.5, 231.5, 232.5, 233.5, 234.5, 235.5, 236.5, 237.5, 238.5, 239.5, 240.5, 241.5, 242.5, 243.5, 244.5, 245.5, 246.5, 247.5, 248.5, 249.5, 250.5, 251.5, 252.5, 253.5, 254.5, 255.5, 256.5, 257.5, 258.5, 259.5, 260.5, 261.5, 262.5, 263.5, 264.5, 265.5, 266.5, 267.5, 268.5, 269.5, 270.5, 271.5, 272.5, 273.5, 274.5, 275.5, 276.5, 277.5, 278.5, 279.5, 280.5, 281.5, 282.5, 283.5, 284.5, 285.5, 286.5, 287.5, 288.5, 289.5, 290.5, 291.5, 292.5, 293.5, 294.5, 295.5, 296.5, 297.5, 298.5, 299.5, 300.5, 301.5, 302.5, 303.5, 304.5, 305.5, 306.5, 307.5, 308.5, 309.5, 310.5, 311.5, 312.5, 313.5, 314.5, 315.5, 316.5, 317.5, 318.5, 319.5, 320.5, 321.5, 322.5, 323.5, 324.5, 325.5, 326.5, 327.5, 328.5, 329.5, 330.5, 331.5, 332.5, 333.5, 334.5, 335.5, 336.5, 337.5, 338.5, 339.5, 340.5, 341.5, 342.5, 343.5, 344.5, 345.5, 346.5, 347.5, 348.5, 349.5, 350.5, 351.5, 352.5, 353.5, 354.5, 355.5, 356.5, 357.5, 358.5, 359.5, 360.5, 361.5, 362.5, 363.5, 364.5, 365.5, 366.5, 367.5, 368.5, 369.5, 370.5, 371.5, 372.5, 373.5, 374.5, 375.5, 376.5, 377.5, 378.5, 379.5, 380.5, 381.5, 382.5, 383.5, 384.5, 385.5, 386.5, 387.5, 388.5, 389.5, 390.5, 391.5, 392.5, 393.5, 394.5, 395.5, 396.5, 397.5, 398.5, 399.5, 400.5, 401.5, 402.5, 403.5, 404.5, 405.5, 406.5, 407.5, 408.5, 409.5, 410.5, 411.5, 412.5, 413.5, 414.5, 415.5, 416.5, 417.5, 418.5, 419.5, 420.5, 421.5, 422.5, 423.5, 424.5, 425.5, 426.5, 427.5, 428.5, 429.5, 430.5, 431.5, 432.5, 433.5, 434.5, 435.5, 436.5, 437.5, 438.5, 439.5, 440.5, 441.5, 442.5, 443.5, 444.5, 445.5, 446.5, 447.5, 448.5, 449.5, 450.5, 451.5, 452.5, 453.5, 454.5, 455.5, 456.5, 457.5, 458.5, 459.5, 460.5, 461.5, 462.5, 463.5, 464.5, 465.5, 466.5, 467.5, 468.5, 469.5, 470.5, 471.5, 472.5, 473.5, 474.5, 475.5, 476.5, 477.5, 478.5, 479.5, 480.5, 481.5, 482.5, 483.5, 484.5, 485.5, 486.5, 487.5, 488.5, 489.5, 490.5, 491.5, 492.5, 493.5, 494.5, 495.5, 496.5, 497.5, 498.5, 499.5, 500.5, 501.5, 502.5, 503.5, 504.5, 505.5, 506.5, 507.5, 508.5, 509.5, 510.5, 511.5, 512.5, 513.5, 514.5, 515.5, 516.5, 517.5, 518.5, 519.5, 520.5, 521.5, 522.5, 523.5, 524.5, 525.5, 526.5, 527.5, 528.5, 529.5, 530.5, 531.5, 532.5, 533.5, 534.5, 535.5, 536.5, 537.5, 538.5, 539.5, 540.5, 541.5, 542.5, 543.5, 544.5, 545.5, 546.5, 547.5, 548.5, 549.5, 550.5, 551.5, 552.5, 553.5, 554.5, 555.5, 556.5, 557.5, 558.5, 559.5, 560.5, 561.5, 562.5, 563.5, 564.5, 565.5, 566.5, 567.5, 568.5, 569.5, 570.5, 571.5, 572.5, 573.5, 574.5, 575.5, 576.5, 577.5, 578.5, 579.5, 580.5, 581.5, 582.5, 583.5, 584.5, 585.5, 586.5, 587.5, 588.5, 589.5, 590.5, 591.5, 592.5, 593.5, 594.5, 595.5, 596.5, 597.5, 598.5, 599.5, 600.5, 601.5, 602.5, 603.5, 604.5, 605.5, 606.5, 607.5, 608.5, 609.5, 610.5, 611.5, 612.5, 613.5, 614.5, 615.5, 616.5, 617.5, 618.5, 619.5, 620.5, 621.5, 622.5, 623.5, 624.5, 625.5, 626.5, 627.5, 628.5, 629.5, 630.5, 631.5, 632.5, 633.5, 634.5, 635.5, 636.5, 637.5, 638.5, 639.5, 640.5, 641.5, 642.5, 643.5, 644.5, 645.5, 646.5, 647.5, 648.5, 649.5, 650.5, 651.5, 652.5, 653.5, 654.5, 655.5, 656.5, 657.5, 658.5, 659.5, 660.5, 661.5, 662.5, 663.5, 664.5, 665.5, 666.5, 667.5, 668.5, 669.5, 670.5, 671.5, 672.5, 673.5, 674.5, 675.5, 676.5, 677.5, 678.5, 679.5, 680.5, 681.5, 682.5, 683.5, 684.5, 685.5, 686.5, 687.5, 688.5, 689.5, 690.5, 691.5, 692.5, 693.5, 694.5, 695.5, 696.5, 697.5, 698.5, 699.5, 700.5, 701.5, 702.5, 703.5, 704.5, 705.5, 706.5, 707.5, 708.5, 709.5, 710.5, 711.5, 712.5, 713.5, 714.5, 715.5, 716.5, 717.5, 718.5, 719.5, 720.5, 721.5, 722.5, 723.5, 724.5, 725.5, 726.5, 727.5, 728.5, 729.5, 730.5, 731.5, 732.5, 733.5, 734.5, 735.5, 736.5, 737.5, 738.5, 739.5, 740.5, 741.5, 742.5, 743.5, 744.5, 745.5, 746.5, 747.5, 748.5, 749.5, 750.5, 751.5, 752.5, 753.5, 754.5, 755.5, 756.5, 757.5, 758.5, 759.5, 760.5, 761.5, 762.5, 763.5, 764.5, 765.5, 766.5, 767.5, 768.5, 769.5, 770.5, 771.5, 772.5, 773.5, 774.5, 775.5, 776.5, 777.5, 778.5, 779.5, 780.5, 781.5, 782.5, 783.5, 784.5, 785.5, 786.5, 787.5, 788.5, 789.5, 790.5, 791.5, 792.5, 793.5, 794.5, 795.5, 796.5, 797.5, 798.5, 799.5, 800.5, 801.5, 802.5, 803.5, 804.5, 805.5, 806.5, 807.5, 808.5, 809.5, 810.5, 811.5, 812.5, 813.5, 814.5, 815.5, 816.5, 817.5, 818.5, 819.5, 820.5, 821.5, 822.5, 823.5, 824.5, 825.5, 826.5, 827.5, 828.5, 829.5, 830.5, 831.5, 832.5, 833.5, 834.5, 835.5, 836.5, 837.5, 838.5, 839.5, 840.5, 841.5, 842.5, 843.5, 844.5, 845.5, 846.5, 847.5, 848.5, 849.5, 850.5, 851.5, 852.5, 853.5, 854.5, 855.5, 856.5, 857.5, 858.5, 859.5, 860.5, 861.5, 862.5, 863.5, 864.5, 865.5, 866.5, 867.5, 868.5, 869.5, 870.5, 871.5, 872.5, 873.5, 874.5, 875.5, 876.5, 877.5, 878.5, 879.5, 880.5, 881.5, 882.5, 883.5, 884.5, 885.5, 886.5, 887.5, 888.5, 889.5, 890.5, 891.5, 892.5, 893.5, 894.5, 895.5, 896.5, 897.5, 898.5, 899.5, 900.5, 901.5, 902.5, 903.5, 904.5, 905.5, 906.5, 907.5, 908.5, 909.5, 910.5, 911.5, 912.5, 913.5, 914.5, 915.5, 916.5, 917.5, 918.5, 919.5, 920.5, 921.5, 922.5, 923.5, 924.5, 925.5, 926.5, 927.5, 928.5, 929.5, 930.5, 931.5, 932.5, 933.5, 934.5, 935.5, 936.5, 937.5, 938.5, 939.5, 940.5, 941.5, 942.5, 943.5, 944.5, 945.5, 946.5, 947.5, 948.5, 949.5, 950.5, 951.5, 952.5, 953.5, 954.5, 955.5, 956.5, 957.5, 958.5, 959.5, 960.5, 961.5, 962.5, 963.5, 964.5, 965.5, 966.5, 967.5, 968.5, 969.5, 970.5, 971.5, 972.5, 973.5, 974.5, 975.5, 976.5, 977.5, 978.5, 979.5, 980.5, 981.5, 982.5, 983.5, 984.5, 985.5, 986.5, 987.5, 988.5, 989.5, 990.5, 991.5, 992.5, 993.5, 994.5, 995.5, 996.5, 997.5, 998.5, 999.5, 1000.5, 1001.5, 1002.5, 1003.5, 1004.5, 1005.5, 1006.5, 1007.5, 1008.5, 1009.5, 1010.5, 1011.5, 1012.5, 1013.5, 1014.5, 1015.5, 1016.5, 1017.5, 1018.5, 1019.5, 1020.5, 1021.5, 1022.5, 1023.5, 1024.5, 1025.5, 1026.5, 1027.5, 1028.5, 1029.5, 1030.5, 1031.5, 1032.5, 1033.5, 1034.5, 1035.5, 1036.5, 1037.5, 1038.5, 1039.5, 1040.5, 1041.5, 1042.5, 1043.5, 1044.5, 1045.5, 1046.5, 1047.5, 1048.5, 1049.5, 1050.5, 1051.5, 1052.5, 1053.5, 1054.5, 1055.5, 1056.5, 1057.5, 1058.5, 1059.5, 1060.5])
y_values = np.array([408, 387, 421, 431, 413, 399, 389, 384, 406, 388, 389, 399, 374, 379, 336, 360, 313, 358, 369, 327, 351, 310, 305, 326, 319, 301, 347, 318, 325, 330, 322, 308, 294, 331, 292, 338, 294, 291, 294, 286, 283, 284, 296, 294, 262, 262, 247, 245, 241, 244, 260, 293, 244, 229, 263, 233, 246, 229, 236, 274, 236, 233, 203, 224, 236, 230, 213, 230, 212, 211, 178, 203, 203, 165, 202, 219, 183, 181, 201, 200, 220, 190, 172, 140, 193, 175, 166, 168, 171, 166, 173, 152, 152, 154, 177, 161, 156, 144, 156, 170, 134, 140, 141, 137, 143, 142, 162, 129, 147, 114, 131, 148, 136, 114, 113, 136, 129, 133, 127, 143, 111, 140, 122, 121, 108, 107, 128, 116, 118, 124, 107, 113, 101, 94, 110, 114, 109, 112, 86, 104, 103, 94, 92, 103, 94, 93, 89, 91, 97, 91, 77, 83, 100, 101, 85, 71, 88, 82, 95, 84, 95, 78, 86, 77, 86, 60, 73, 85, 74, 83, 73, 75, 77, 75, 84, 53, 66, 70, 74, 60, 61, 71, 74, 64, 69, 85, 74, 69, 55, 64, 63, 72, 76, 57, 57, 51, 66, 56, 54, 45, 53, 67, 43, 62, 44, 35, 61, 41, 61, 59, 53, 57, 41, 57, 42, 41, 54, 56, 33, 48, 49, 52, 51, 40, 38, 42, 43, 45, 39, 55, 37, 40, 45, 37, 38, 44, 38, 49, 39, 38, 32, 44, 30, 31, 40, 32, 38, 36, 42, 22, 37, 37, 36, 25, 31, 29, 34, 27, 24, 29, 28, 26, 23, 22, 27, 32, 32, 22, 28, 25, 32, 28, 21, 27, 21, 26, 24, 21, 23, 23, 28, 23, 15, 16, 28, 21, 13, 33, 18, 26, 22, 26, 18, 18, 28, 15, 27, 20, 13, 20, 24, 20, 14, 24, 19, 18, 23, 14, 18, 20, 14, 17, 25, 12, 15, 16, 18, 11, 12, 13, 19, 19, 17, 17, 12, 14, 18, 11, 22, 15, 14, 11, 11, 15, 17, 14, 8, 14, 9, 10, 16, 13, 18, 13, 13, 11, 10, 9, 12, 21, 13, 14, 13, 8, 9, 17, 12, 21, 10, 15, 15, 9, 13, 9, 11, 10, 9, 8, 8, 6, 11, 11, 9, 6, 8, 13, 10, 7, 7, 10, 8, 6, 8, 4, 9, 2, 7, 3, 13, 9, 10, 9, 7, 5, 7, 4, 9, 4, 12, 10, 6, 9, 12, 7, 4, 9, 11, 8, 6, 12, 9, 2, 4, 8, 5, 7, 10, 6, 7, 12, 5, 2, 9, 7, 0, 8, 4, 4, 6, 10, 7, 4, 6, 4, 5, 4, 7, 7, 5, 9, 7, 7, 1, 2, 10, 9, 3, 3, 5, 3, 2, 0, 6, 2, 8, 9, 7, 2, 3, 3, 2, 1, 2, 5, 3, 1, 4, 3, 5, 2, 7, 4, 3, 4, 4, 1, 3, 4, 4, 4, 5, 3, 0, 4, 3, 6, 4, 1, 2, 7, 5, 2, 2, 1, 5, 2, 3, 2, 2, 3, 3, 2, 4, 2, 2, 3, 1, 4, 5, 2, 4, 1, 4, 2, 3, 1, 1, 4, 1, 3, 3, 2, 4, 1, 1, 2, 4, 0, 4, 2, 0, 4, 1, 1, 1, 5, 4, 3, 3, 2, 3, 3, 1, 1, 3, 2, 2, 3, 3, 1, 2, 1, 3, 1, 5, 1, 5, 2, 2, 1, 5, 2, 3, 1, 4, 3, 0, 1, 0, 2, 1, 1, 2, 2, 3, 3, 2, 1, 1, 0, 2, 1, 0, 0, 1, 2, 2, 3, 3, 0, 1, 2, 2, 2, 2, 1, 1, 2, 2, 3, 0, 1, 2, 2, 1, 0, 1, 2, 2, 4, 2, 1, 2, 2, 0, 2, 1, 0, 1, 0, 1, 1, 0, 2, 2, 2, 0, 1, 2, 3, 2, 2, 1, 0, 2, 1, 0, 1, 0, 0, 0, 1, 2, 2, 0, 1, 0, 0, 3, 0, 1, 0, 2, 0, 2, 0, 1, 0, 2, 0, 2, 1, 0, 0, 2, 1, 0, 0, 0, 2, 1, 0, 1, 3, 2, 1, 1, 0, 0, 3, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 2, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 2, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 2, 3, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 1])
# x_errors = np.array([0, 0, 0, 0, 0, 0])
x_errors = 0.5
y_errors = np.array([20.7031, 20.17655, 21.0223, 21.26455, 20.8265, 20.47915, 20.2273, 20.10015, 20.6536, 20.20195, 20.2273, 20.47915, 19.84335, 19.9722, 18.83485, 19.47805, 18.19655, 19.4253, 19.7137, 18.58775, 19.23945, 18.11155, 17.96905, 18.56005, 18.3652, 17.85415, 19.1324, 18.33725, 18.5324, 18.6705, 18.44895, 18.05465, 17.6513, 18.69795, 17.59285, 18.8893, 17.6513, 17.5636, 17.6513, 17.4165, 17.32755, 17.35725, 17.70945, 17.6513, 16.69155, 16.69155, 16.22155, 16.1578, 16.02955, 16.12585, 16.62965, 17.6221, 16.12585, 15.63825, 16.7224, 15.7698, 16.1897, 15.63825, 15.8677, 17.05795, 15.8677, 15.7698, 14.75365, 15.4722, 15.8677, 15.6712, 15.10025, 15.6712, 15.0659, 15.03155, 13.8479, 14.75365, 14.75365, 13.3517, 14.7185, 15.3043, 14.0339, 13.9598, 14.68335, 14.648, 15.338, 14.2901, 13.6212, 12.3392, 14.39845, 13.73505, 13.39055, 13.4679, 13.58305, 13.39055, 13.65925, 12.8356, 12.8356, 12.9164, 13.8104, 13.19515, 12.99665, 12.50695, 12.99665, 13.5448, 12.08305, 12.3392, 12.38135, 12.2118, 12.46525, 12.42335, 13.23445, 11.86515, 12.63125, 11.18485, 11.9528, 12.67235, 12.16905, 11.18485, 11.13795, 12.16905, 11.86515, 12.0398, 11.7768, 12.46525, 11.04355, 12.3392, 11.5529, 11.50755, 10.9003, 10.8521, 11.82105, 11.27805, 11.37045, 11.643, 10.8521, 11.13795, 10.55815, 10.203945, 10.996, 11.18485, 10.9483, 11.09085, 9.782575, 10.7062, 10.6571, 10.203945, 10.1003, 10.6571, 10.203945, 10.15224, 9.942765, 10.048115, 10.357275, 10.048115, 9.284425, 9.61952, 10.508325, 10.55815, 9.728535, 8.936, 9.88969, 9.56454, 10.255305, 9.674185, 10.255305, 9.34116, 9.782575, 9.284425, 9.782575, 8.25667, 9.053715, 9.728535, 9.11197, 9.61952, 9.053715, 9.169835, 9.284425, 9.169835, 9.674185, 7.791495, 8.634245, 8.87652, 9.11197, 8.25667, 8.320865, 8.936, 9.11197, 8.510365, 8.81661, 9.728535, 9.11197, 8.81661, 7.927375, 8.510365, 8.4477, 8.99506, 9.22732, 8.060815, 8.060815, 7.653025, 8.634245, 7.99439, 7.859745, 7.22054, 7.791495, 8.695485, 7.070055, 8.38454, 7.145725, 6.43004, 8.320865, 6.916045, 8.320865, 8.191935, 7.791495, 8.060815, 6.916045, 8.060815, 6.993505, 6.916045, 7.859745, 7.99439, 6.258935, 7.440155, 7.51183, 7.722595, 7.653025, 6.83763, 6.67782, 6.993505, 7.070055, 7.22054, 6.758235, 7.927375, 6.59635, 6.83763, 7.22054, 6.59635, 6.67782, 7.145725, 6.67782, 7.51183, 6.758235, 6.67782, 6.171445, 7.145725, 5.992285, 6.082585, 6.83763, 6.171445, 6.67782, 6.513775, 6.993505, 5.207935, 6.59635, 6.59635, 6.513775, 5.51646, 6.082585, 5.900475, 6.345115, 5.712005, 5.41577, 5.900475, 5.80708, 5.615165, 5.312975, 5.207935, 5.712005, 6.171445, 6.171445, 5.207935, 5.80708, 5.51646, 6.171445, 5.80708, 5.100495, 5.712005, 5.100495, 5.615165, 5.41577, 5.100495, 5.312975, 5.312975, 5.80708, 5.312975, 4.39406, 4.520435, 5.80708, 5.100495, 4.128115, 6.258935, 4.76195, 5.615165, 5.207935, 5.615165, 4.76195, 4.76195, 5.80708, 4.39406, 5.712005, 4.990485, 4.128115, 4.990485, 5.41577, 4.990485, 4.26344, 5.41577, 4.87771, 4.76195, 5.312975, 4.26344, 4.76195, 4.990485, 4.26344, 4.64295, 5.51646, 3.987545, 4.39406, 4.520435, 4.76195, 3.84105, 3.987545, 4.128115, 4.87771, 4.87771, 4.64295, 4.64295, 3.987545, 4.26344, 4.76195, 3.84105, 5.207935, 4.39406, 4.26344, 3.84105, 3.84105, 4.39406, 4.64295, 4.26344, 3.356765, 4.26344, 3.52683, 3.68782, 4.520435, 4.128115, 4.76195, 4.128115, 4.128115, 3.84105, 3.68782, 3.52683, 3.987545, 5.100495, 4.128115, 4.26344, 4.128115, 3.356765, 3.52683, 4.64295, 3.987545, 5.100495, 3.68782, 4.39406, 4.39406, 3.52683, 4.128115, 3.52683, 3.84105, 3.68782, 3.52683, 3.356765, 3.356765, 2.981785, 3.84105, 3.84105, 3.52683, 2.981785, 3.356765, 4.128115, 3.68782, 3.175875, 3.175875, 3.68782, 3.356765, 2.981785, 3.356765, 2.538545, 3.52683, 1.964835, 3.175875, 2.275445, 4.128115, 3.52683, 3.68782, 3.52683, 3.175875, 2.77108, 3.175875, 2.538545, 3.52683, 2.538545, 3.987545, 3.68782, 2.981785, 3.52683, 3.987545, 3.175875, 2.538545, 3.52683, 3.84105, 3.356765, 2.981785, 3.987545, 3.52683, 1.964835, 2.538545, 3.356765, 2.77108, 3.175875, 3.68782, 2.981785, 3.175875, 3.987545, 2.77108, 1.964835, 3.52683, 3.175875, 0.92051, 3.356765, 2.538545, 2.538545, 2.981785, 3.68782, 3.175875, 2.538545, 2.981785, 2.538545, 2.77108, 2.538545, 3.175875, 3.175875, 2.77108, 3.52683, 3.175875, 3.175875, 1.563388, 1.964835, 3.68782, 3.52683, 2.275445, 2.275445, 2.77108, 2.275445, 1.964835, 0.92051, 2.981785, 1.964835, 3.356765, 3.52683, 3.175875, 1.964835, 2.275445, 2.275445, 1.964835, 1.563388, 1.964835, 2.77108, 2.275445, 1.563388, 2.538545, 2.275445, 2.77108, 1.964835, 3.175875, 2.538545, 2.275445, 2.538545, 2.538545, 1.563388, 2.275445, 2.538545, 2.538545, 2.538545, 2.77108, 2.275445, 0.92051, 2.538545, 2.275445, 2.981785, 2.538545, 1.563388, 1.964835, 3.175875, 2.77108, 1.964835, 1.964835, 1.563388, 2.77108, 1.964835, 2.275445, 1.964835, 1.964835, 2.275445, 2.275445, 1.964835, 2.538545, 1.964835, 1.964835, 2.275445, 1.563388, 2.538545, 2.77108, 1.964835, 2.538545, 1.563388, 2.538545, 1.964835, 2.275445, 1.563388, 1.563388, 2.538545, 1.563388, 2.275445, 2.275445, 1.964835, 2.538545, 1.563388, 1.563388, 1.964835, 2.538545, 0.92051, 2.538545, 1.964835, 0.92051, 2.538545, 1.563388, 1.563388, 1.563388, 2.77108, 2.538545, 2.275445, 2.275445, 1.964835, 2.275445, 2.275445, 1.563388, 1.563388, 2.275445, 1.964835, 1.964835, 2.275445, 2.275445, 1.563388, 1.964835, 1.563388, 2.275445, 1.563388, 2.77108, 1.563388, 2.77108, 1.964835, 1.964835, 1.563388, 2.77108, 1.964835, 2.275445, 1.563388, 2.538545, 2.275445, 0.92051, 1.563388, 0.92051, 1.964835, 1.563388, 1.563388, 1.964835, 1.964835, 2.275445, 2.275445, 1.964835, 1.563388, 1.563388, 0.92051, 1.964835, 1.563388, 0.92051, 0.92051, 1.563388, 1.964835, 1.964835, 2.275445, 2.275445, 0.92051, 1.563388, 1.964835, 1.964835, 1.964835, 1.964835, 1.563388, 1.563388, 1.964835, 1.964835, 2.275445, 0.92051, 1.563388, 1.964835, 1.964835, 1.563388, 0.92051, 1.563388, 1.964835, 1.964835, 2.538545, 1.964835, 1.563388, 1.964835, 1.964835, 0.92051, 1.964835, 1.563388, 0.92051, 1.563388, 0.92051, 1.563388, 1.563388, 0.92051, 1.964835, 1.964835, 1.964835, 0.92051, 1.563388, 1.964835, 2.275445, 1.964835, 1.964835, 1.563388, 0.92051, 1.964835, 1.563388, 0.92051, 1.563388, 0.92051, 0.92051, 0.92051, 1.563388, 1.964835, 1.964835, 0.92051, 1.563388, 0.92051, 0.92051, 2.275445, 0.92051, 1.563388, 0.92051, 1.964835, 0.92051, 1.964835, 0.92051, 1.563388, 0.92051, 1.964835, 0.92051, 1.964835, 1.563388, 0.92051, 0.92051, 1.964835, 1.563388, 0.92051, 0.92051, 0.92051, 1.964835, 1.563388, 0.92051, 1.563388, 2.275445, 1.964835, 1.563388, 1.563388, 0.92051, 0.92051, 2.275445, 0.92051, 1.563388, 0.92051, 1.563388, 0.92051, 1.563388, 1.563388, 1.563388, 1.563388, 1.563388, 0.92051, 0.92051, 0.92051, 1.563388, 1.964835, 0.92051, 1.563388, 0.92051, 1.563388, 1.563388, 0.92051, 1.563388, 0.92051, 0.92051, 0.92051, 0.92051, 1.563388, 0.92051, 1.563388, 1.563388, 1.964835, 1.563388, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 1.563388, 0.92051, 0.92051, 0.92051, 1.964835, 0.92051, 1.563388, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 1.964835, 2.275445, 1.563388, 1.563388, 0.92051, 0.92051, 0.92051, 1.563388, 0.92051, 1.563388, 0.92051, 1.563388, 0.92051, 1.563388, 0.92051, 0.92051, 0.92051, 1.964835, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 1.563388, 1.563388, 1.563388, 1.964835, 0.92051, 1.563388, 1.563388, 0.92051, 1.563388, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 1.964835, 1.563388, 0.92051, 1.563388, 0.92051, 0.92051, 0.92051, 0.92051, 1.563388, 0.92051, 0.92051, 0.92051, 1.964835, 0.92051, 1.563388, 0.92051, 0.92051, 0.92051, 1.563388, 0.92051, 1.563388, 0.92051, 0.92051, 0.92051, 1.563388, 0.92051, 0.92051, 0.92051, 1.964835, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 1.563388, 0.92051, 0.92051, 0.92051, 0.92051, 1.563388, 0.92051, 0.92051, 1.563388, 1.563388, 1.563388, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 1.563388, 0.92051, 0.92051, 0.92051, 0.92051, 1.563388, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 1.563388, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 1.563388, 0.92051, 0.92051, 1.964835, 0.92051, 0.92051, 1.563388, 0.92051, 0.92051, 1.563388, 1.563388, 1.563388, 1.563388, 1.563388, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 1.563388, 0.92051, 1.563388, 1.563388, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 1.563388, 1.563388, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 1.563388, 0.92051, 1.563388, 1.563388, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 1.964835, 1.563388, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 0.92051, 1.563388])

# Set up the MCMC sampler
num_walkers = 100
num_dimensions = 3
sampler = emcee.EnsembleSampler(num_walkers, num_dimensions, log_posterior, args=(x_values, y_values, x_errors, y_errors))

# Initialize the walkers
initial_positions = np.zeros((num_walkers, num_dimensions))
initial_positions[:, 0] =  (0.9 + 0.2 * np.random.rand(num_walkers)) * 2840000    # initial slope between 1 and 10
initial_positions[:, 1] =  (0.9 + 0.2 * np.random.rand(num_walkers)) * 67.9  # initial intercept between -150 and 200
initial_positions[:, 2] =  (0.9 + 0.2 * np.random.rand(num_walkers)) * 5.0  # initial intercept between -150 and 200
# these ranges are just for the initial positions of the walkers in the MCMC sampler. The walkers are free to explore beyond these ranges during the sampling process, constrained only by the prior distribution defined in the log_prior function.
#  np.random.rand(num_walkers) generates an array of num_walkers random numbers uniformly distributed in the half-open interval [0.0, 1.0).

# Run the MCMC sampling
num_steps = 8000
sampler.run_mcmc(initial_positions, num_steps, progress=True)

# Get the chain and discard burn-in
chain = sampler.get_chain(discard=200, flat=True) # combining the chains from all walkers into a single chain.

# Plot the colorful 2D corner plot for parameter posterior distributions
labels = ["Total Decays", "Half-life", "Background"]
corner_plot = corner.corner(chain, labels=labels, show_titles=True, title_fmt=".3f", title_kwargs={"fontsize": 13})
corner_plot.savefig("Exp_corner_plot.png")

# Plot the central mean/prediction with transparent uncertainty band
fig, ax = plt.subplots(figsize=(15, 5))
fig.subplots_adjust(left=0.07, bottom=0.15, right=0.97, top=0.95)
plt.rcParams["font.size"] = "18"
ax.errorbar(x_values, y_values, xerr=x_errors, yerr=y_errors, color="black", markersize=1, fmt="s", label="Data")

x_range = np.linspace(160, 1061, 901) # np.linspace(start, stop, num)
y_values_for_each_params = [exponential_model(params, x_range) for params in chain] # predictions of our calibrated model at 1000 x points for each set of parameters in the chain
y_values_for_each_params = np.array(y_values_for_each_params)  # Convert list to numpy array
print(y_values_for_each_params.shape) # (total number of samples, number of x points)


# Calculate the median, upper and lower percentiles
median = np.percentile(y_values_for_each_params, 50, axis = 0)
upper = np.percentile(y_values_for_each_params, 97.5, axis = 0)
lower = np.percentile(y_values_for_each_params, 2.5, axis = 0)

# Plot the median, upper and lower percentiles with band
ax.fill_between(x_range, lower, upper, color="blue", alpha=0.2, label='95% Credible Interval')
ax.plot(x_range, median, color="blue", alpha=1, linewidth=2, label='Prediction Mean')
ax.set_xlabel("Time (ns)")
ax.set_ylabel("Counts per 1 ns")
ax.legend(loc="upper right", fontsize=18)
ax.set_xlim(160, 1061)
ax.set_ylim(0, )
plt.savefig("Linear_prediction.png")
plt.show()

