import numpy as np
import matplotlib.pyplot as plt
import emcee
import corner


# Define the exponential decay function
def exponential_model(parameters, x_values):
    total_decays, half_life, background = parameters
    return (total_decays * 0.693147) / (half_life * 0.693147) * np.exp(x_values / (-half_life / 0.693147)) + background

# Define the log-likelihood function
def log_likelihood(parameters, x_values, y_values, x_errors, y_errors):
    total_decays, half_life, background = parameters
    model_values = exponential_model(parameters, x_values)
    total_error = np.sqrt(y_errors**2 + (x_errors)**2)
    sigma_squared = total_error**2
    return -0.5 * np.sum((y_values - model_values)**2 / sigma_squared + np.log(sigma_squared))


# Define the log-prior function
def log_prior(parameters):
    total_decays, half_life, background = parameters
    if 2000000 < total_decays < 3000000 and 60.0 < half_life < 80.0 and 0.0 < background < 10.0:
        return 0.0
    return -np.inf


# Define the log-posterior function
def log_posterior(parameters, x_values, y_values, x_errors, y_errors):
    log_prior_val = log_prior(parameters)
    if not np.isfinite(log_prior_val):
        return -np.inf
    return log_prior_val + log_likelihood(parameters, x_values, y_values, x_errors, y_errors)

# Input Data
# x_values = np.array([1858.5, 3254.19, 240.56, 389.563, 509.978, 1034.54, 1258.27, 1795.13, 519.299, 829.71, 1446.98, 2225.88, 2758.24, 3052.86])
# x_errors = np.array([1.1018, 0.4202, 0.1258, 0.0161, 0.0178, 0.2888, 0.3806, 0.6457, 0.0773, 0.1399, 0.5624, 11.8172, 1.4090, 1.9001]) * 1
# y_values = np.array([1460.820, 2614.511, 121.7817, 244.6974, 344.2785, 778.9045, 964.057, 1408.013, 351.9320, 609.321, 1120.294, 1764.491, 2204.10, 2447.69])
# y_errors = np.array([0.005, 0.010, 0.003, 0.008, 0.012, 0.024, 0.05, 0.03, 0.0021, 0.007, 0.006, 0.014, 0.04, 0.03]) * 1
x_values = np.array([160.5, 161.5, 162.5, 163.5, 164.5, 165.5, 166.5, 167.5, 168.5, 169.5, 170.5, 171.5, 172.5, 173.5, 174.5, 175.5, 176.5, 177.5, 178.5, 179.5, 180.5, 181.5, 182.5, 183.5, 184.5, 185.5, 186.5, 187.5, 188.5, 189.5, 190.5, 191.5, 192.5, 193.5, 194.5, 195.5, 196.5, 197.5, 198.5, 199.5, 200.5, 201.5, 202.5, 203.5, 204.5, 205.5, 206.5, 207.5, 208.5, 209.5, 210.5, 211.5, 212.5, 213.5, 214.5, 215.5, 216.5, 217.5, 218.5, 219.5, 220.5, 221.5, 222.5, 223.5, 224.5, 225.5, 226.5, 227.5, 228.5, 229.5, 230.5, 231.5, 232.5, 233.5, 234.5, 235.5, 236.5, 237.5, 238.5, 239.5, 240.5, 241.5, 242.5, 243.5, 244.5, 245.5, 246.5, 247.5, 248.5, 249.5, 250.5, 251.5, 252.5, 253.5, 254.5, 255.5, 256.5, 257.5, 258.5, 259.5, 260.5, 261.5, 262.5, 263.5, 264.5, 265.5, 266.5, 267.5, 268.5, 269.5, 270.5, 271.5, 272.5, 273.5, 274.5, 275.5, 276.5, 277.5, 278.5, 279.5, 280.5, 281.5, 282.5, 283.5, 284.5, 285.5, 286.5, 287.5, 288.5, 289.5, 290.5, 291.5, 292.5, 293.5, 294.5, 295.5, 296.5, 297.5, 298.5, 299.5, 300.5, 301.5, 302.5, 303.5, 304.5, 305.5, 306.5, 307.5, 308.5, 309.5, 310.5, 311.5, 312.5, 313.5, 314.5, 315.5, 316.5, 317.5, 318.5, 319.5, 320.5, 321.5, 322.5, 323.5, 324.5, 325.5, 326.5, 327.5, 328.5, 329.5, 330.5, 331.5, 332.5, 333.5, 334.5, 335.5, 336.5, 337.5, 338.5, 339.5, 340.5, 341.5, 342.5, 343.5, 344.5, 345.5, 346.5, 347.5, 348.5, 349.5, 350.5, 351.5, 352.5, 353.5, 354.5, 355.5, 356.5, 357.5, 358.5, 359.5, 360.5, 361.5, 362.5, 363.5, 364.5, 365.5, 366.5, 367.5, 368.5, 369.5, 370.5, 371.5, 372.5, 373.5, 374.5, 375.5, 376.5, 377.5, 378.5, 379.5, 380.5, 381.5, 382.5, 383.5, 384.5, 385.5, 386.5, 387.5, 388.5, 389.5, 390.5, 391.5, 392.5, 393.5, 394.5, 395.5, 396.5, 397.5, 398.5, 399.5, 400.5, 401.5, 402.5, 403.5, 404.5, 405.5, 406.5, 407.5, 408.5, 409.5, 410.5, 411.5, 412.5, 413.5, 414.5, 415.5, 416.5, 417.5, 418.5, 419.5, 420.5, 421.5, 422.5, 423.5, 424.5, 425.5, 426.5, 427.5, 428.5, 429.5, 430.5, 431.5, 432.5, 433.5, 434.5, 435.5, 436.5, 437.5, 438.5, 439.5, 440.5, 441.5, 442.5, 443.5, 444.5, 445.5, 446.5, 447.5, 448.5, 449.5, 450.5, 451.5, 452.5, 453.5, 454.5, 455.5, 456.5, 457.5, 458.5, 459.5, 460.5, 461.5, 462.5, 463.5, 464.5, 465.5, 466.5, 467.5, 468.5, 469.5, 470.5, 471.5, 472.5, 473.5, 474.5, 475.5, 476.5, 477.5, 478.5, 479.5, 480.5, 481.5, 482.5, 483.5, 484.5, 485.5, 486.5, 487.5, 488.5, 489.5, 490.5, 491.5, 492.5, 493.5, 494.5, 495.5, 496.5, 497.5, 498.5, 499.5, 500.5, 501.5, 502.5, 503.5, 504.5, 505.5, 506.5, 507.5, 508.5, 509.5, 510.5, 511.5, 512.5, 513.5, 514.5, 515.5, 516.5, 517.5, 518.5, 519.5, 520.5, 521.5, 522.5, 523.5, 524.5, 525.5, 526.5, 527.5, 528.5, 529.5, 530.5, 531.5, 532.5, 533.5, 534.5, 535.5, 536.5, 537.5, 538.5, 539.5, 540.5, 541.5, 542.5, 543.5, 544.5, 545.5, 546.5, 547.5, 548.5, 549.5, 550.5, 551.5, 552.5, 553.5, 554.5, 555.5, 556.5, 557.5, 558.5, 559.5, 560.5, 561.5, 562.5, 563.5, 564.5, 565.5, 566.5, 567.5, 568.5, 569.5, 570.5, 571.5, 572.5, 573.5, 574.5, 575.5, 576.5, 577.5, 578.5, 579.5, 580.5, 581.5, 582.5, 583.5, 584.5, 585.5, 586.5, 587.5, 588.5, 589.5, 590.5, 591.5, 592.5, 593.5, 594.5, 595.5, 596.5, 597.5, 598.5, 599.5, 600.5, 601.5, 602.5, 603.5, 604.5, 605.5, 606.5, 607.5, 608.5, 609.5, 610.5, 611.5, 612.5, 613.5, 614.5, 615.5, 616.5, 617.5, 618.5, 619.5, 620.5, 621.5, 622.5, 623.5, 624.5, 625.5, 626.5, 627.5, 628.5, 629.5, 630.5, 631.5, 632.5, 633.5, 634.5, 635.5, 636.5, 637.5, 638.5, 639.5, 640.5, 641.5, 642.5, 643.5, 644.5, 645.5, 646.5, 647.5, 648.5, 649.5, 650.5, 651.5, 652.5, 653.5, 654.5, 655.5, 656.5, 657.5, 658.5, 659.5, 660.5, 661.5, 662.5, 663.5, 664.5, 665.5, 666.5, 667.5, 668.5, 669.5, 670.5, 671.5, 672.5, 673.5, 674.5, 675.5, 676.5, 677.5, 678.5, 679.5, 680.5, 681.5, 682.5, 683.5, 684.5, 685.5, 686.5, 687.5, 688.5, 689.5, 690.5, 691.5, 692.5, 693.5, 694.5, 695.5, 696.5, 697.5, 698.5, 699.5, 700.5, 701.5, 702.5, 703.5, 704.5, 705.5, 706.5, 707.5, 708.5, 709.5, 710.5, 711.5, 712.5, 713.5, 714.5, 715.5, 716.5, 717.5, 718.5, 719.5, 720.5, 721.5, 722.5, 723.5, 724.5, 725.5, 726.5, 727.5, 728.5, 729.5, 730.5, 731.5, 732.5, 733.5, 734.5, 735.5, 736.5, 737.5, 738.5, 739.5, 740.5, 741.5, 742.5, 743.5, 744.5, 745.5, 746.5, 747.5, 748.5, 749.5, 750.5, 751.5, 752.5, 753.5, 754.5, 755.5, 756.5, 757.5, 758.5, 759.5, 760.5, 761.5, 762.5, 763.5, 764.5, 765.5, 766.5, 767.5, 768.5, 769.5, 770.5, 771.5, 772.5, 773.5, 774.5, 775.5, 776.5, 777.5, 778.5, 779.5, 780.5, 781.5, 782.5, 783.5, 784.5, 785.5, 786.5, 787.5, 788.5, 789.5, 790.5, 791.5, 792.5, 793.5, 794.5, 795.5, 796.5, 797.5, 798.5, 799.5, 800.5, 801.5, 802.5, 803.5, 804.5, 805.5, 806.5, 807.5, 808.5, 809.5, 810.5, 811.5, 812.5, 813.5, 814.5, 815.5, 816.5, 817.5, 818.5, 819.5, 820.5, 821.5, 822.5, 823.5, 824.5, 825.5, 826.5, 827.5, 828.5, 829.5, 830.5, 831.5, 832.5, 833.5, 834.5, 835.5, 836.5, 837.5, 838.5, 839.5, 840.5, 841.5, 842.5, 843.5, 844.5, 845.5, 846.5, 847.5, 848.5, 849.5, 850.5, 851.5, 852.5, 853.5, 854.5, 855.5, 856.5, 857.5, 858.5, 859.5, 860.5, 861.5, 862.5, 863.5, 864.5, 865.5, 866.5, 867.5, 868.5, 869.5, 870.5, 871.5, 872.5, 873.5, 874.5, 875.5, 876.5, 877.5, 878.5, 879.5, 880.5, 881.5, 882.5, 883.5, 884.5, 885.5, 886.5, 887.5, 888.5, 889.5, 890.5, 891.5, 892.5, 893.5, 894.5, 895.5, 896.5, 897.5, 898.5, 899.5, 900.5, 901.5, 902.5, 903.5, 904.5, 905.5, 906.5, 907.5, 908.5, 909.5, 910.5, 911.5, 912.5, 913.5, 914.5, 915.5, 916.5, 917.5, 918.5, 919.5, 920.5, 921.5, 922.5, 923.5, 924.5, 925.5, 926.5, 927.5, 928.5, 929.5, 930.5, 931.5, 932.5, 933.5, 934.5, 935.5, 936.5, 937.5, 938.5, 939.5, 940.5, 941.5, 942.5, 943.5, 944.5, 945.5, 946.5, 947.5, 948.5, 949.5, 950.5, 951.5, 952.5, 953.5, 954.5, 955.5, 956.5, 957.5, 958.5, 959.5, 960.5, 961.5, 962.5, 963.5, 964.5, 965.5, 966.5, 967.5, 968.5, 969.5, 970.5, 971.5, 972.5, 973.5, 974.5, 975.5, 976.5, 977.5, 978.5, 979.5, 980.5, 981.5, 982.5, 983.5, 984.5, 985.5, 986.5, 987.5, 988.5, 989.5, 990.5, 991.5, 992.5, 993.5, 994.5, 995.5, 996.5, 997.5, 998.5, 999.5, 1000.5, 1001.5, 1002.5, 1003.5, 1004.5, 1005.5, 1006.5, 1007.5, 1008.5, 1009.5, 1010.5, 1011.5, 1012.5, 1013.5, 1014.5, 1015.5, 1016.5, 1017.5, 1018.5, 1019.5, 1020.5, 1021.5, 1022.5, 1023.5, 1024.5, 1025.5, 1026.5, 1027.5, 1028.5, 1029.5, 1030.5, 1031.5, 1032.5, 1033.5, 1034.5, 1035.5, 1036.5, 1037.5, 1038.5, 1039.5, 1040.5, 1041.5, 1042.5, 1043.5, 1044.5, 1045.5, 1046.5, 1047.5, 1048.5, 1049.5, 1050.5, 1051.5, 1052.5, 1053.5, 1054.5, 1055.5, 1056.5, 1057.5, 1058.5, 1059.5, 1060.5])
y_values = np.array([8207, 7976, 7903, 7917, 7778, 7751, 7684, 7770, 7595, 7352, 7251, 7246, 7265, 7119, 7106, 7008, 6932, 6855, 6867, 6710, 6613, 6617, 6509, 6490, 6329, 6359, 6207, 6071, 6079, 6155, 5994, 5917, 5834, 5915, 5782, 5694, 5679, 5621, 5490, 5523, 5412, 5337, 5269, 5306, 5305, 5181, 4999, 5061, 4904, 4898, 5005, 4859, 4852, 4848, 4642, 4632, 4629, 4561, 4449, 4429, 4536, 4400, 4401, 4205, 4221, 4248, 4087, 4027, 4090, 3998, 4002, 3965, 4001, 3831, 3810, 3738, 3743, 3629, 3607, 3730, 3550, 3572, 3572, 3539, 3418, 3582, 3491, 3472, 3484, 3321, 3224, 3220, 3254, 3056, 3160, 3066, 3037, 3040, 2966, 3015, 3001, 2906, 2836, 2811, 2800, 2856, 2674, 2751, 2770, 2665, 2684, 2591, 2549, 2544, 2598, 2557, 2596, 2506, 2464, 2441, 2461, 2306, 2371, 2351, 2287, 2200, 2277, 2247, 2162, 2170, 2104, 2058, 2110, 2243, 2121, 2028, 2006, 2050, 1926, 2018, 1968, 1953, 1956, 1841, 1979, 1831, 1829, 1811, 1814, 1837, 1772, 1822, 1702, 1712, 1712, 1759, 1662, 1685, 1601, 1621, 1591, 1667, 1499, 1591, 1535, 1582, 1544, 1521, 1505, 1460, 1469, 1395, 1434, 1394, 1355, 1348, 1354, 1306, 1346, 1341, 1289, 1298, 1312, 1290, 1202, 1260, 1238, 1230, 1176, 1215, 1158, 1168, 1136, 1134, 1112, 1184, 1143, 1125, 1130, 1065, 1041, 1044, 1031, 1007, 1004, 972, 1010, 1011, 1001, 938, 973, 979, 898, 989, 888, 958, 921, 898, 882, 846, 845, 822, 862, 847, 803, 847, 766, 853, 802, 793, 757, 781, 772, 735, 749, 749, 728, 713, 762, 726, 767, 698, 743, 667, 655, 681, 643, 659, 639, 621, 656, 637, 629, 599, 631, 660, 564, 647, 570, 581, 591, 632, 567, 560, 585, 584, 557, 540, 534, 564, 498, 529, 508, 546, 498, 490, 492, 472, 519, 492, 512, 494, 471, 454, 472, 436, 446, 432, 427, 438, 429, 450, 425, 426, 411, 432, 397, 387, 385, 423, 387, 435, 378, 402, 357, 389, 380, 361, 336, 362, 330, 363, 336, 336, 331, 366, 339, 344, 292, 302, 336, 336, 310, 308, 328, 298, 276, 274, 290, 275, 308, 273, 279, 270, 273, 268, 256, 249, 252, 269, 261, 248, 281, 252, 241, 265, 270, 232, 240, 225, 249, 236, 211, 209, 232, 246, 232, 224, 223, 222, 210, 186, 202, 187, 194, 180, 210, 188, 207, 212, 195, 184, 200, 222, 197, 171, 167, 181, 176, 168, 180, 178, 175, 169, 165, 151, 161, 178, 136, 164, 163, 129, 170, 149, 151, 141, 151, 157, 156, 148, 121, 134, 153, 125, 134, 126, 152, 124, 144, 130, 153, 121, 133, 134, 111, 122, 127, 121, 147, 108, 96, 108, 117, 120, 119, 125, 105, 116, 109, 119, 121, 101, 103, 94, 107, 106, 96, 100, 97, 80, 106, 103, 95, 94, 86, 91, 92, 88, 109, 77, 88, 78, 93, 83, 76, 102, 86, 91, 92, 70, 71, 84, 78, 83, 72, 71, 92, 79, 76, 87, 54, 68, 70, 91, 61, 75, 79, 71, 63, 66, 68, 64, 66, 71, 71, 61, 59, 60, 50, 72, 52, 58, 59, 58, 62, 52, 53, 54, 53, 57, 41, 54, 56, 49, 64, 56, 47, 49, 52, 47, 41, 41, 54, 46, 44, 43, 40, 41, 45, 43, 40, 36, 31, 62, 48, 45, 40, 46, 42, 54, 50, 45, 47, 35, 36, 40, 31, 50, 40, 36, 36, 30, 33, 39, 39, 34, 40, 34, 45, 32, 35, 33, 38, 31, 28, 39, 37, 34, 35, 28, 26, 27, 47, 23, 38, 30, 26, 22, 25, 27, 18, 28, 26, 35, 35, 25, 29, 29, 27, 23, 32, 38, 32, 26, 23, 30, 21, 22, 23, 27, 26, 18, 29, 23, 21, 20, 27, 24, 29, 17, 18, 25, 18, 25, 23, 32, 24, 19, 20, 23, 14, 29, 18, 23, 22, 22, 19, 16, 26, 21, 27, 23, 18, 19, 20, 18, 22, 25, 22, 20, 21, 15, 19, 15, 16, 18, 17, 24, 18, 20, 15, 21, 23, 17, 18, 15, 10, 15, 14, 19, 15, 25, 21, 21, 19, 16, 15, 16, 17, 13, 16, 7, 11, 16, 14, 14, 19, 16, 11, 9, 15, 8, 11, 7, 16, 11, 17, 11, 13, 17, 13, 13, 8, 22, 12, 14, 13, 15, 13, 10, 13, 14, 9, 14, 19, 17, 15, 13, 12, 8, 13, 15, 11, 14, 11, 8, 22, 13, 9, 7, 13, 7, 14, 9, 14, 8, 15, 12, 8, 12, 11, 11, 12, 15, 9, 17, 19, 15, 10, 15, 14, 12, 9, 7, 14, 19, 8, 8, 6, 12, 12, 9, 9, 6, 15, 9, 11, 12, 9, 14, 13, 7, 9, 9, 8, 10, 8, 14, 6, 5, 11, 10, 7, 14, 10, 12, 5, 14, 6, 12, 8, 10, 7, 16, 9, 8, 10, 6, 11, 13, 6, 5, 8, 16, 8, 6, 9, 13, 11, 13, 10, 5, 5, 8, 4, 16, 14, 7, 5, 3, 1, 6, 16, 9, 10, 5, 8, 7, 6, 6, 6, 5, 8, 8, 7, 9, 13, 12, 8, 5, 4, 7, 6, 6, 10, 5, 4, 5, 7, 9, 8, 5, 8, 4, 12, 12, 8, 4, 7, 5, 6, 3, 3, 5, 10, 8, 4, 8, 13, 7, 4, 7, 8, 6, 5, 5, 11, 8, 5, 8, 5, 5, 3, 8, 10, 5, 6, 5, 6, 5, 10, 4, 1, 9, 12, 6, 7, 5, 4, 12, 6, 3, 8, 5, 8, 5, 8, 7, 7, 7, 9, 6, 3, 4, 6, 5, 9, 7, 5, 10, 2])
# x_errors = np.array([0, 0, 0, 0, 0, 0])
x_errors = 0.5
y_errors = np.array([91.5962, 90.3122, 89.9026, 89.9813, 89.1968, 89.0436, 88.6622, 89.1514, 88.1531, 86.7477, 86.1567, 86.1274, 86.2389, 85.3781, 85.301, 84.7178, 84.2626, 83.799, 83.8714, 82.9187, 82.3245, 82.349, 81.6825, 81.5647, 80.5592, 80.7475, 79.7887, 78.9209, 78.9722, 79.4581, 78.4252, 77.9264, 77.385, 77.9134, 77.0438, 76.463, 76.3636, 75.9778, 75.099, 75.3214, 74.5708, 74.0593, 73.5925, 73.8469, 73.84, 72.9838, 71.7083, 72.1454, 71.0333, 70.9905, 71.7507, 70.7113, 70.6611, 70.6324, 69.1371, 69.0637, 69.0417, 68.5401, 67.7058, 67.5557, 68.3548, 67.3375, 67.3451, 65.8511, 65.9744, 66.1818, 64.9349, 64.4639, 64.9583, 64.235, 64.2666, 63.9735, 64.2587, 62.9005, 62.7306, 62.1446, 62.1855, 61.2467, 61.0639, 62.0792, 60.5875, 60.7718, 60.7718, 60.4951, 59.4694, 60.8554, 60.0903, 59.9293, 60.0311, 58.6339, 57.7862, 57.7509, 58.0497, 56.2871, 57.2198, 56.3775, 56.115, 56.1422, 55.4671, 55.9151, 55.7875, 54.9135, 54.2604, 54.0252, 53.9213, 54.4478, 52.7172, 53.4563, 53.6371, 52.6301, 52.8138, 51.9084, 51.4942, 51.4447, 51.9771, 51.5734, 51.9575, 51.0666, 50.6454, 50.4132, 50.6152, 49.0278, 49.6998, 49.494, 48.8296, 47.9113, 48.7249, 48.4096, 47.5045, 47.5904, 46.8766, 46.3725, 46.942, 48.3674, 47.0616, 46.0407, 45.7958, 46.2843, 44.8938, 45.9296, 45.3697, 45.2003, 45.2342, 43.9146, 45.4934, 43.798, 43.7746, 43.5637, 43.5989, 43.868, 43.1031, 43.6927, 42.2634, 42.3844, 42.3844, 42.9484, 41.7758, 42.0569, 41.0208, 41.2699, 40.8957, 41.8371, 39.7255, 40.8957, 40.1876, 40.7827, 40.3023, 40.0086, 39.8029, 39.2187, 39.3362, 38.3586, 38.877, 38.3452, 37.8194, 37.7242, 37.8058, 37.1479, 37.697, 37.6288, 36.9119, 37.037, 37.2307, 36.9259, 35.6795, 36.5059, 36.1947, 36.0809, 35.3026, 35.8664, 35.0392, 35.1858, 34.7145, 34.6848, 34.3567, 35.419, 34.8181, 34.551, 34.6254, 33.6446, 33.2749, 33.3213, 33.1196, 32.7438, 32.6965, 32.1876, 32.791, 32.8067, 32.6491, 31.6377, 32.2036, 32.2996, 30.9778, 32.459, 30.8105, 31.9624, 31.359, 30.9778, 30.7097, 30.0975, 30.0804, 29.6822, 30.3712, 30.1147, 29.349, 30.1147, 28.6888, 30.2176, 29.3314, 29.1721, 28.5258, 28.9583, 28.7969, 28.1232, 28.3801, 28.3801, 27.9938, 27.7146, 28.6164, 27.9568, 28.7068, 27.4323, 28.2703, 26.8393, 26.606, 27.1088, 26.3706, 26.684, 26.2916, 25.9333, 26.6255, 26.2521, 26.0932, 25.4881, 26.133, 26.7034, 24.7627, 26.4493, 24.8886, 25.1178, 25.3242, 26.1529, 24.8258, 24.6784, 25.2006, 25.1799, 24.615, 24.2523, 24.1229, 24.7627, 23.3309, 24.0145, 23.5537, 24.3809, 23.3309, 23.151, 23.1961, 22.7409, 23.7962, 23.1961, 23.6422, 23.2411, 22.7179, 22.3229, 22.7409, 21.8966, 22.1345, 21.8007, 21.6801, 21.9444, 21.7284, 22.2289, 21.6317, 21.6559, 21.2896, 21.8007, 20.9416, 20.6893, 20.6384, 21.5832, 20.6893, 21.8726, 20.4594, 21.0666, 19.9121, 20.74, 20.5107, 20.0176, 19.3485, 20.0438, 19.1843, 20.0701, 19.3485, 19.3485, 19.2117, 20.1486, 19.4301, 19.5652, 18.1075, 18.3973, 19.3485, 19.3485, 18.6258, 18.5689, 19.1292, 18.282, 17.6333, 17.5731, 18.049, 17.6032, 18.5689, 17.5429, 17.7233, 17.452, 17.5429, 17.3911, 17.0209, 16.8009, 16.8955, 17.4216, 17.1761, 16.7692, 17.783, 16.8955, 16.5457, 17.2993, 17.452, 16.2534, 16.5135, 16.0222, 16.8009, 16.384, 15.5488, 15.4799, 16.2534, 16.7057, 16.2534, 15.9889, 15.9555, 15.9221, 15.5144, 14.6626, 15.2361, 14.6992, 14.9523, 14.4413, 15.5144, 14.7356, 15.4107, 15.5831, 14.9881, 14.5893, 15.1657, 15.9221, 15.0594, 14.1022, 13.9487, 14.4784, 14.2916, 13.9872, 14.4413, 14.3667, 14.254, 14.0257, 13.8712, 13.3154, 13.7149, 14.3667, 12.6905, 13.8323, 13.7933, 12.3872, 14.064, 13.2339, 13.3154, 12.9024, 13.3154, 13.5566, 13.5167, 13.1929, 12.0303, 12.6047, 13.3963, 12.2102, 12.6047, 12.2547, 13.3559, 12.1655, 13.0278, 12.431, 13.3963, 12.0303, 12.5615, 12.6047, 11.5673, 12.0756, 12.299, 12.0303, 13.1519, 11.4244, 10.832, 11.4244, 11.8475, 11.9849, 11.9393, 12.2102, 11.2795, 11.8013, 11.4723, 11.9393, 12.0303, 11.0831, 11.1818, 10.7298, 11.3763, 11.328, 10.832, 11.0334, 10.8827, 9.98157, 11.328, 11.1818, 10.781, 10.7298, 10.3096, 10.5744, 10.6264, 10.4164, 11.4723, 9.81298, 10.4164, 9.86953, 10.6782, 10.147, 9.75606, 11.1325, 10.3096, 10.5744, 10.6264, 9.40647, 9.46574, 10.2015, 9.86953, 10.147, 9.52459, 9.46574, 10.6264, 9.92572, 9.75606, 10.3631, 8.39385, 9.28666, 9.40647, 10.5744, 8.85295, 9.69877, 9.92572, 9.46574, 8.97927, 9.16509, 9.28666, 9.04169, 9.16509, 9.46574, 9.46574, 8.85295, 8.72456, 8.78902, 8.11822, 9.52459, 8.25735, 8.65956, 8.72456, 8.65956, 8.91637, 8.25735, 8.32592, 8.39385, 8.32592, 8.59401, 7.45519, 8.39385, 8.52788, 8.04763, 9.04169, 8.52788, 7.90429, 8.04763, 8.25735, 7.90429, 7.45519, 7.45519, 8.39385, 7.83149, 7.68351, 7.60828, 7.37726, 7.45519, 7.7579, 7.60828, 7.37726, 7.05555, 6.6276, 8.91637, 7.97633, 7.7579, 7.37726, 7.83149, 7.53218, 8.39385, 8.11822, 7.7579, 7.90429, 6.97241, 7.05555, 7.37726, 6.6276, 8.11822, 7.37726, 7.05555, 7.05555, 6.53805, 6.80257, 7.29837, 7.29837, 6.8881, 7.37726, 6.8881, 7.7579, 6.71575, 6.97241, 6.80257, 7.21848, 6.6276, 6.35445, 7.29837, 7.13756, 6.8881, 6.97241, 6.35445, 6.16432, 6.26024, 7.90429, 5.86523, 7.21848, 6.53805, 6.16432, 5.76137, 6.06659, 6.26024, 5.32101, 6.35445, 6.16432, 6.97241, 6.97241, 6.06659, 6.44702, 6.44702, 6.26024, 5.86523, 6.71575, 7.21848, 6.71575, 6.16432, 5.86523, 6.53805, 5.65518, 5.76137, 5.86523, 6.26024, 6.16432, 5.32101, 6.44702, 5.86523, 5.65518, 5.54652, 6.26024, 5.96693, 6.44702, 5.20372, 5.32101, 6.06659, 5.32101, 6.06659, 5.86523, 6.71575, 5.96693, 5.4352, 5.54652, 5.86523, 4.83038, 6.44702, 5.32101, 5.86523, 5.76137, 5.76137, 5.4352, 5.08307, 6.16432, 5.65518, 6.26024, 5.86523, 5.32101, 5.4352, 5.54652, 5.32101, 5.76137, 6.06659, 5.76137, 5.54652, 5.65518, 4.95874, 5.4352, 4.95874, 5.08307, 5.32101, 5.20372, 5.96693, 5.32101, 5.54652, 4.95874, 5.65518, 5.86523, 5.20372, 5.32101, 4.95874, 4.26695, 4.95874, 4.83038, 5.4352, 4.95874, 6.06659, 5.65518, 5.65518, 5.4352, 5.08307, 4.95874, 5.08307, 5.20372, 4.69757, 5.08307, 3.77028, 4.41652, 5.08307, 4.83038, 4.83038, 5.4352, 5.08307, 4.41652, 4.1102, 4.95874, 3.94514, 4.41652, 3.77028, 5.08307, 4.41652, 5.20372, 4.41652, 4.69757, 5.20372, 4.69757, 4.69757, 3.94514, 5.76137, 4.55982, 4.83038, 4.69757, 4.95874, 4.69757, 4.26695, 4.69757, 4.83038, 4.1102, 4.83038, 5.4352, 5.20372, 4.95874, 4.69757, 4.55982, 3.94514, 4.69757, 4.95874, 4.41652, 4.83038, 4.41652, 3.94514, 5.76137, 4.69757, 4.1102, 3.77028, 4.69757, 3.77028, 4.83038, 4.1102, 4.83038, 3.94514, 4.95874, 4.55982, 3.94514, 4.55982, 4.41652, 4.41652, 4.55982, 4.95874, 4.1102, 5.20372, 5.4352, 4.95874, 4.26695, 4.95874, 4.83038, 4.55982, 4.1102, 3.77028, 4.83038, 5.4352, 3.94514, 3.94514, 3.58364, 4.55982, 4.55982, 4.1102, 4.1102, 3.58364, 4.95874, 4.1102, 4.41652, 4.55982, 4.1102, 4.83038, 4.69757, 3.77028, 4.1102, 4.1102, 3.94514, 4.26695, 3.94514, 4.83038, 3.58364, 3.38247, 4.41652, 4.26695, 3.77028, 4.83038, 4.26695, 4.55982, 3.38247, 4.83038, 3.58364, 4.55982, 3.94514, 4.26695, 3.77028, 5.08307, 4.1102, 3.94514, 4.26695, 3.58364, 4.41652, 4.69757, 3.58364, 3.38247, 3.94514, 5.08307, 3.94514, 3.58364, 4.1102, 4.69757, 4.41652, 4.69757, 4.26695, 3.38247, 3.38247, 3.94514, 3.16275, 5.08307, 4.83038, 3.77028, 3.38247, 2.91819, 2.29953, 3.58364, 5.08307, 4.1102, 4.26695, 3.38247, 3.94514, 3.77028, 3.58364, 3.58364, 3.58364, 3.38247, 3.94514, 3.94514, 3.77028, 4.1102, 4.69757, 4.55982, 3.94514, 3.38247, 3.16275, 3.77028, 3.58364, 3.58364, 4.26695, 3.38247, 3.16275, 3.38247, 3.77028, 4.1102, 3.94514, 3.38247, 3.94514, 3.16275, 4.55982, 4.55982, 3.94514, 3.16275, 3.77028, 3.38247, 3.58364, 2.91819, 2.91819, 3.38247, 4.26695, 3.94514, 3.16275, 3.94514, 4.69757, 3.77028, 3.16275, 3.77028, 3.94514, 3.58364, 3.38247, 3.38247, 4.41652, 3.94514, 3.38247, 3.94514, 3.38247, 3.38247, 2.91819, 3.94514, 4.26695, 3.38247, 3.58364, 3.38247, 3.58364, 3.38247, 4.26695, 3.16275, 2.29953, 4.1102, 4.55982, 3.58364, 3.77028, 3.38247, 3.16275, 4.55982, 3.58364, 2.91819, 3.94514, 3.38247, 3.94514, 3.38247, 3.94514, 3.77028, 3.77028, 3.77028, 4.1102, 3.58364, 2.91819, 3.16275, 3.58364, 3.38247, 4.1102, 3.77028, 3.38247, 4.26695, 2.63786])

# Set up the MCMC sampler
num_walkers = 100
num_dimensions = 3
sampler = emcee.EnsembleSampler(num_walkers, num_dimensions, log_posterior, args=(x_values, y_values, x_errors, y_errors))

# Initialize the walkers
initial_positions = np.zeros((num_walkers, num_dimensions))
initial_positions[:, 0] =  (0.9 + 0.2 * np.random.rand(num_walkers)) * 2840000    # initial slope between 1 and 10
initial_positions[:, 1] =  (0.9 + 0.2 * np.random.rand(num_walkers)) * 67.9  # initial intercept between -150 and 200
initial_positions[:, 2] =  (0.9 + 0.2 * np.random.rand(num_walkers)) * 5.0  # initial intercept between -150 and 200
# these ranges are just for the initial positions of the walkers in the MCMC sampler. The walkers are free to explore beyond these ranges during the sampling process, constrained only by the prior distribution defined in the log_prior function.
#  np.random.rand(num_walkers) generates an array of num_walkers random numbers uniformly distributed in the half-open interval [0.0, 1.0).

# Run the MCMC sampling
num_steps = 8000
sampler.run_mcmc(initial_positions, num_steps, progress=True)

# Get the chain and discard burn-in
chain = sampler.get_chain(discard=200, flat=True) # combining the chains from all walkers into a single chain.

# Plot the colorful 2D corner plot for parameter posterior distributions
labels = ["Total Decays", "Half-life", "Background"]
corner_plot = corner.corner(chain, labels=labels, show_titles=True, title_fmt=".3f", title_kwargs={"fontsize": 13})
corner_plot.savefig("Exp_corner_plot.png")

# Plot the central mean/prediction with transparent uncertainty band
fig, ax = plt.subplots(figsize=(15, 5))
fig.subplots_adjust(left=0.07, bottom=0.15, right=0.97, top=0.95)
plt.rcParams["font.size"] = "18"
ax.errorbar(x_values, y_values, xerr=x_errors, yerr=y_errors, color="black", markersize=1, fmt="s", label="Data")

x_range = np.linspace(160, 1061, 901) # np.linspace(start, stop, num)
y_values_for_each_params = [exponential_model(params, x_range) for params in chain] # predictions of our calibrated model at 1000 x points for each set of parameters in the chain
y_values_for_each_params = np.array(y_values_for_each_params)  # Convert list to numpy array
print(y_values_for_each_params.shape) # (total number of samples, number of x points)


# Calculate the median, upper and lower percentiles
median = np.percentile(y_values_for_each_params, 50, axis = 0)
upper = np.percentile(y_values_for_each_params, 97.5, axis = 0)
lower = np.percentile(y_values_for_each_params, 2.5, axis = 0)

# Plot the median, upper and lower percentiles with band
ax.fill_between(x_range, lower, upper, color="blue", alpha=0.2, label='95% Credible Interval')
ax.plot(x_range, median, color="blue", alpha=1, linewidth=2, label='Prediction Mean')
ax.set_xlabel("Time (ns)")
ax.set_ylabel("Counts per 1 ns")
ax.legend(loc="upper right", fontsize=18)
ax.set_xlim(160, 1061)
ax.set_ylim(0, )
plt.savefig("Linear_prediction.png")
plt.show()

